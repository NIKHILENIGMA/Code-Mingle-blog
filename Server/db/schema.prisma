generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
  previewFeatures = ["queryCompiler", "driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Resource {
  POST
  COMMENT
  REPLY
  USER
  ADMIN_PANEL
  REPORT
  ALL
}

// Enums for action types 
enum ActionType {
  CREATE
  UPDATE
  READ
  DELETE
}

// Enums for like target types
enum LikeTarget {
  POST
  COMMENT
  REPLY
}

// Enums for user roles
enum PostStatus {
  PUBLISHED
  DRAFT
  ARCHIVED
}

// User model 
model User {
  id            String           @id @default(cuid())
  firstName     String?          @map("first_name")
  lastName      String?          @map("last_name")
  username      String           @unique @map("username")
  email         String           @unique
  password      String?
  verifiedEmail Boolean          @default(false) @map("verified_email")
  bio           String?          @map("bio_data")
  profileImage  String?          @map("profile_image")
  coverImage    String?          @map("cover_image") // Cover image URL
  isActive      Boolean          @default(true) @map("is_active") // Is the user active?
  lastLoginAt   DateTime?        @map("last_login_at") // Last login date
  roleId        String?          @map("role_id") // Role ID for the user
  socialLinks   UserSocialMedia?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  userProviders      UserProvider[] // OAuth providers linked to the user
  savedPosts         SavedPost[] // Posts saved by the user
  posts              Post[] // Posts created by the user
  comments           Comment[] // Comments made by the user
  replies            Reply[] // Replies made by the user
  Like               Like[] // Likes made by the user
  followers          Follow[]             @relation("user_followers") // Users who follow this user
  following          Follow[]             @relation("user_followings") // Users this user follows
  role               Role?                @relation(fields: [roleId], references: [id], onDelete: Cascade)
  Session            Session[] // User sessions
  passwordResetToken PasswordResetToken[] // Password reset tokens for the user

  @@map("users")
}

model UserProvider {
  id                   String    @id @default(cuid())
  userId               String    @map("user_id")
  provider             String    @map("provider_name") // google, github, twitter
  providerId           String    @map("provider_id") // sub from OAuth
  providerAccessToken  String?   @map("provider_access_token") // Access token from OAuth
  providerRefreshToken String?   @map("provider_refresh_token") // Refresh token from OAuth
  providerTokenExpiry  DateTime? @map("provider_token_expiry") // Expiry date of the access token
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
}

model UserSocialMedia {
  id        String   @id @default(cuid())
  userId    String   @unique
  linkedin  String?
  twitter   String?
  youtube   String?
  instagram String?
  github    String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_social_media")
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique // "ADMIN", "MODERATOR", "USER"
  displayName String // User-friendly name
  description String? // Description of the role
  users       User[]
  rolePerms   RolePermission[] //in back to roles
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("roles")
}

// Dynamic Permission model
model Permission {
  id          String           @id @default(cuid())
  name        String           @unique // "CREATE_POST", "DELETE_COMMENT", etc.
  description String?
  resource    Resource // "POST", "COMMENT", "USER", etc. 
  actions     ActionType // "READ", "WRITE", "UPDATE", "DELETE"
  rolePerms   RolePermission[] // join back to roles
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("permissions")
}

// Join table for Role and Permission
model RolePermission {
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

// Session model for user authentication
model Session {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  accessToken  String   @unique @map("access_token")
  refreshToken String   @unique @map("refresh_token")
  userAgent    String?  @map("user_agent") // User agent string
  ipAddress    String?  @map("ip_address") // IP address of the user
  valid        Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Post model 
model Post {
  id             String     @id @default(uuid())
  title          String?
  content        String?    @db.Text
  slug           String     @unique
  status         PostStatus @default(DRAFT)
  postCoverImage String?    @map("post_cover_image_url")
  thumbnailImage String?    @map("thumbnail_image_url")
  readTime       Int?       @map("read_time")
  userId         String     @map("user_id")
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")

  comments Comment[]
  replies  Reply[]
  tags     PostTag[]
  saveBy   SavedPost[] // Posts saved by the user

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index(status)
  @@index([userId])
  @@map("posts")
}

// Can you show the improvements in the chat ??
model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postTags PostTag[]

  @@map("tags")
}

model PostTag {
  postId    String   @map("post_id")
  tagId     String   @map("tag_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@map("post_tags")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String   @map("user_id")
  postId    String   @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  replies Reply[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
  @@map("comments")
}

model Reply {
  id        String   @id @default(cuid())
  content   String
  userId    String   @map("user_id")
  postId    String   @map("post_id")
  commentId String   @map("comment_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("replies")
}

model Like {
  id        String     @id @default(cuid())
  userId    String     @map("user_id")
  targetId  String
  target    LikeTarget
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, targetId, target])
  @@map("likes")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String   @map("follower_id")
  followingId String   @map("following_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  follower  User @relation("user_followers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("user_followings", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model SavedPost {
  id        String   @id @default(cuid()) // Unique identifier for the saved post
  userId    String   @map("user_id") // ID of the user who saved the post
  postId    String   @map("post_id") // ID of the post that was saved
  createdAt DateTime @default(now()) // Date when the post was saved
  updatedAt DateTime @updatedAt // Date when the saved post was last updated

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId]) // A user can only save a post once in a collection
  @@map("save_posts") // This is the table name
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String // ID of the user who requested the password reset
  email     String // Email of the user who requested the password reset
  tokenHash String // hashed using bcrypt or SHA-256
  expiresAt DateTime // Expiration date of the token
  createdAt DateTime @default(now())
  used      Boolean  @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
