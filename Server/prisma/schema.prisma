// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  firstName   String?      @map("first_name")
  lastName    String?      @map("last_name")
  username    String?      @unique @map("username")
  password    String
  dob         DateTime?    @map("date_of_birth")
  bio         String?      @map("bio_data")
  avatarImg   String?      @map("avatar_img")
  coverImg    String?      @map("cover_img")
  role        String       @default("USER")
  collections Collection[]
  savedPosts  SavedPost[]
  posts       Post[]
  comments    Comment[]
  replies     Reply[]
  Like        Like[]
  followers   Follow[]     @relation("user_followers")
  following   Follow[]     @relation("user_followings")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("users")
}

model Post {
  id              String      @id @default(uuid())
  title           String?
  content         String?     @db.Text
  publishedAt     DateTime?   @map("published_at")
  slug            String?     @unique
  metaDescription String?     @map("meta_description")
  image           String?     @map("image_url")
  thumbnailImage  String?     @map("thumbnail_image_url")
  readTime        Int?        @map("read_time")
  authorId        String      @map("author_id")
  categoryId      Int?        @map("category_id")
  collectionId    String?
  category        Category?   @relation(fields: [categoryId], references: [id])
  author          User        @relation(fields: [authorId], references: [id])
  comments        Comment[]
  postTags        Tag[]
  Like            Like[]
  SaveBy          SavedPost[]
  status          PostStatus
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  @@index(status)
  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String   @map("post_id")
  authorId  String   @map("author_id")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  replies   Reply[]
  like      Like[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("comments")
}

model Reply {
  id        String   @id @default(cuid())
  content   String
  commentId String   @map("comment_id")
  authorId  String   @map("author_id")
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  like      Like[]
  createdAt DateTime @default(now()) @map("created_at")

  @@map("replies")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String   @map("follower_id")
  followingId String   @map("following_id")
  follower    User     @relation("user_followers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("user_followings", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now()) @map("created_at")

  @@unique([followerId, followingId])
  @@map("follows")
}

model Collection {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  userId      String      @map("user_id")
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  savedPosts  SavedPost[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([name, userId])
  @@map("collections")
}

model SavedPost {
  id           String     @id @default(cuid())
  userId       String     @map("user_id")
  postId       String     @map("post_id")
  collectionId String     @map("collection_id")
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  post         Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([userId, postId, collectionId]) // A user can only save a post once in a collection
  @@map("save_posts") // This is the table name
}

model Tag {
  id     Int     @id @default(autoincrement())
  postId String  @map("post_id")
  tag    String?
  post   Post    @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("tags")
}

model Like {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  postId    String   @map("post_id")
  commentId String   @map("comment_id")
  replyId   String   @map("reply_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  reply     Reply?   @relation(fields: [replyId], references: [id], onDelete: Cascade)

  @@map("likes")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

enum PostStatus {
  PUBLISHED
  DRAFT
  ARCHIVED
}

model KeyStore {
  id         Int      @id @default(autoincrement())
  userId     String   @unique @map("user_id")
  accessKey  String   @unique @map("access_key")
  refreshKey String   @unique @map("refresh_key")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("key_store")
}

model ResetPassword {
  id         Int      @id @default(autoincrement())
  userId     String   @map("user_id")
  resetToken String   @unique @map("reset_token")
  expiresAt  DateTime @map("expires_at")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("reset_password")
}
