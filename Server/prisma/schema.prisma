// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  firstName String?   @map("first_name")
  lastName  String?   @map("last_name")
  username  String?   @unique @map("username")
  password  String
  dob       DateTime? @map("date_of_birth")
  bio       String?   @map("bio_data")
  avatarImg String?   @map("avatar_img")
  coverImg  String?   @map("cover_img")
  role      String    @default("USER")
  posts     Post[]
  comments  Comment[]
  replies   Reply[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("users")
}

model Post {
  id              String     @id @default(uuid())
  title           String?
  content         String?    @db.Text
  status          PostStatus
  authorId        String     @map("author_id")
  author          User       @relation(fields: [authorId], references: [id])
  comments        Comment[]
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  publishedAt     DateTime?  @map("published_at")
  slug            String?    @unique
  metaDescription String?    @map("meta_description")
  image           String?    @map("image_url")

  @@index(status)
  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String   @map("post_id")
  authorId  String   @map("author_id")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  replies   Reply[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("comments")
}

model Reply {
  id        String  @id @default(cuid())
  content   String
  commentId String  @map("comment_id")
  authorId  String  @map("author_id")
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")

  @@map("replies")
}

enum PostStatus {
  PUBLISHED
  DRAFT
  ARCHIVED
}

model KeyStore {
  id         Int      @id @default(autoincrement())
  userId     String   @unique @map("user_id")
  accessKey  String   @unique @map("access_key")
  refreshKey String   @unique @map("refresh_key")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("key_store")
}

model ResetPassword {
  id         Int      @id @default(autoincrement())
  userId     String   @map("user_id")
  resetToken String   @unique @map("reset_token")
  expiresAt  DateTime @map("expires_at")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("reset_password")
}
